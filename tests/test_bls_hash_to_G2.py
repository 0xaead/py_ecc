"""
These are temporary tests to check the functionality of helper functions in `hash_to_G2`
They should be removed and replaced with a final version when hash to curve is complete.
"""
from eth_utils import (
    big_endian_to_int,
)
import pytest

from py_ecc.bls import (
    aggregate_pubkeys,
    aggregate_signatures,
    privtopub,
    sign,
    verify,
    verify_multiple,
)
from py_ecc.bls.hash import (
    hash_eth2,
)
from py_ecc.bls.utils import (
    compress_G1,
    compress_G2,
    decompress_G1,
    decompress_G2,
    hash_to_G2,
    signature_to_G2,
)
from py_ecc.bls.constants import (
    POW_2_381,
    POW_2_382,
    POW_2_383,
)
from py_ecc.fields import (
    optimized_bls12_381_FQ as FQ,
    optimized_bls12_381_FQ2 as FQ2,
)
from py_ecc.optimized_bls12_381 import (
    G1,
    G2,
    Z1,
    Z2,
    b,
    b2,
    is_on_curve,
    multiply,
    normalize,
    field_modulus as q,
    optimized_swu_G2,
    iso_map_G2,
)

@pytest.mark.parametrize(
    'u,x,y,z',
    [
        (FQ2([int('028615c3cb1ae6cd947ea3b6c4b318665defda72d207d19aa556098023a1879b17c5a05b19b9f93ae5bf7d7000b7c318', 16), int('00ffccc09c701edcb7a8461bdd7879e5fde5f19ab8215013dc198000c012e7ed8f87d3b840ddfc81c8358c11527d496b', 16)]), # u0
        FQ2([int('0888F3832AD680917A71A1816C939290473474982C647B0B196BA0EDF62A0BC1A15D3E87CF6A287137B16C057E1AC808', 16), int('0B3D6E7A20275C100B460A900B23F2D8D5E9A53C3E59066E8D968D07AB0787940C0AC8A6C8C118FAD9068A2ECF00ADD7', 16)]), # x0
        FQ2([int('08696DF8BAF8C488B7CFCA14CB984D0B78C998C3431E41700B493AAF921F779AA7F3660B1F5D6AC3BA4EBC85A1132CF3', 16), int('053003D3ED23019E585CF255A58634CEDA4C362B2E1D75E2AE85F4D1EF9C400786256D4AEE443DD1C900DD72E4089F73', 16)]), # y0
        FQ2([int('108F7DF15439154BF32D7E4D1B6FEFC4BEF7C39A16AACA469D249770AD7B9F4AD3EA3CE58333A3194177C2D14B5CD2BC', 16), int('09E2E891E7A7AB58D5BF93864000ADBF0B6C31A8E35AB6AEC3B0820C2E536D6F0D170840B0AAFB470A9FD9B2F7DE3C27', 16)])), # z0
        (FQ2([int('0af98de1b831474dab37531928c0a0a72452cb8d00e2e9701ebfa3851b37d1b53d95ceccbdd6327dd178e43ce4a94015', 16), int('028bdabbbc298e66d537bf71c6360c2264ec5d34922e11b68d02dbd4ed4d3bcdedaa345aae5302ed30bb65fdd934f4f9', 16)]), # u1
        FQ2([int('039C33A34D97134F01D334F13C76BD5BB803B853BE4221A826026BFC93B5CA39E74B51A15D00BF88DF4F655915553027', 16), int('08DA2162E554A644AECC1F904F2B140D0296B7AC85B4EE59313DCEDE58B375C2E677160BC97CF8114361ABBE7D4672CD', 16)]), # x1
        FQ2([int('1201968136C60428FB9DF8004C4915DC5E502D20D32F9DD87BC38163A52E2729289490030235E61EAEA098B0E8D63BF8', 16), int('116524863E40B6437BBAB965CDB84614F2346F1AD40300E9B15C3BDDE498E1FC1F76346452D3CF25553E2A3B89D9C5B1', 16)]), # y1
        FQ2([int('08C3BCEBE1FC7F9987AE406A78C3FC898AE0C8A2FF0139A523E3CE91263EAA617519FC1A1158AF39BBA705316C9C2678', 16), int('0C9E92BB5509704DA0B6825A3AA36BA68A877875258F17C315FEA1527A82C7975E8439E91644616DABFD28E1DB43C1D9', 16)])), # z1
    ]
)
def test_swu_optimized(u, x, y, z):
    (result_x, result_y, result_z) = optimized_swu_G2(u)

    assert result_x == x
    assert result_y == y
    assert result_z == z


@pytest.mark.parametrize(
    'iso_x,iso_y,iso_z,g2_x,g2_y',
    [
        (FQ2([int('0888F3832AD680917A71A1816C939290473474982C647B0B196BA0EDF62A0BC1A15D3E87CF6A287137B16C057E1AC808', 16), int('0B3D6E7A20275C100B460A900B23F2D8D5E9A53C3E59066E8D968D07AB0787940C0AC8A6C8C118FAD9068A2ECF00ADD7', 16)]),  # Iso-x0
        FQ2([int('08696DF8BAF8C488B7CFCA14CB984D0B78C998C3431E41700B493AAF921F779AA7F3660B1F5D6AC3BA4EBC85A1132CF3', 16), int('053003D3ED23019E585CF255A58634CEDA4C362B2E1D75E2AE85F4D1EF9C400786256D4AEE443DD1C900DD72E4089F73', 16)]),  # Iso-y0
        FQ2([int('108F7DF15439154BF32D7E4D1B6FEFC4BEF7C39A16AACA469D249770AD7B9F4AD3EA3CE58333A3194177C2D14B5CD2BC', 16), int('09E2E891E7A7AB58D5BF93864000ADBF0B6C31A8E35AB6AEC3B0820C2E536D6F0D170840B0AAFB470A9FD9B2F7DE3C27', 16)]),  # Iso-z0
        FQ2([int('168A912067A8F06CEB1F5F59DCEC69CE47F5A2B1696DFD5E67F1CF675587AD3A19831842D2543957BEE44FE29592996E', 16), int('116F36861307AA38251CAA73AA44FA359732DD92A15CDC70B21E3F7B2A332F73F86801789C469FE3FBB24DEB18AD5F0C', 16)]),  # G2-x0
        FQ2([int('0D4976CD99F4AD7204BC5983F6CE590766852DB93E5BE6CAB4C28591013E132BC6100D42022D5B66CE68A64A6B2A9C24', 16), int('0C6BA0E076144119F2B272718EC04C3FB037C9AA2C4074E64BE233AB27C0397BE175B9FDA277DCE8841669F787161AD2', 16)])),  # G2-y0
        (FQ2([int('039C33A34D97134F01D334F13C76BD5BB803B853BE4221A826026BFC93B5CA39E74B51A15D00BF88DF4F655915553027', 16), int('08DA2162E554A644AECC1F904F2B140D0296B7AC85B4EE59313DCEDE58B375C2E677160BC97CF8114361ABBE7D4672CD', 16)]),  # Iso-x1
        FQ2([int('1201968136C60428FB9DF8004C4915DC5E502D20D32F9DD87BC38163A52E2729289490030235E61EAEA098B0E8D63BF8', 16), int('116524863E40B6437BBAB965CDB84614F2346F1AD40300E9B15C3BDDE498E1FC1F76346452D3CF25553E2A3B89D9C5B1', 16)]),  # Iso-y1
        FQ2([int('08C3BCEBE1FC7F9987AE406A78C3FC898AE0C8A2FF0139A523E3CE91263EAA617519FC1A1158AF39BBA705316C9C2678', 16), int('0C9E92BB5509704DA0B6825A3AA36BA68A877875258F17C315FEA1527A82C7975E8439E91644616DABFD28E1DB43C1D9', 16)]),  # Iso-z1
        FQ2([int('1990072F0029639467E5C5EF9F65B31F194C31586D56141A7906DE6EE2B40803E06A301F9EEE9C8B04FA6AF8C5950F64', 16), int('0910709BEC8515357CB68AE88EA0B7EC6D54190773CC82EDDA68180D62BA214737DC708A5DA815E8B872D3C5B31E5A00', 16)]),  # G2-x1
        FQ2([int('12416C8B9159A047D5F92A6A4E941156E29E2A489B671D2FC3D8ED60FFA5F53FE846ECFB0090211197EF3BA4C07424F9', 16), int('089977D619CEA9D6D11F7148E1CB7622E46153BF1B4D81944603AA72AEFA6CE7CF07550CB6B582D17440F5949D1214FA', 16)])),  # G2-y1
    ]
)
def test_iso_map_G2(iso_x, iso_y, iso_z, g2_x, g2_y):
    (result_x, result_y, result_z) = iso_map_G2(iso_x, iso_y, iso_z)

    result_x = result_x / result_z
    result_y = result_y / result_z

    assert g2_x == result_x
    assert g2_y == result_y


@pytest.mark.parametrize(
    'msg,x,y',
    [
        (b'msg',
        FQ2([int('968732dfe1587c397a44f57b2bf2c90fcf5607b43d92ddf37b641172197ece3a352815fdcc1bf476922b189d6e3ad0d', 16), int('1d4c61fc40232d15968dab008069c695322d9480ed1fff499f4ce08c490dde1927b9ed986daa7193698f5b711408945', 16)]),
        FQ2([int('145fef0e15a2efd3cd12e1145b10a43d1580e1a9af9e921f82fd3d3e8e3e8f20bc5e4e91a9d06ab23dc1ecb9b67a13fc', 16), int('63e6e9bbf9a157c04d5d28b0b1bed28937aec51d3d753f97e721f4d87310820f7d65310da64927518335d44e95d7210', 16)])),
        (b'01234567890123456789012345678901',
        FQ2([int('23efe22f443e2b7ccc18b57cce7278cb3249a440e6135570c7ba296bccac7ffaf4e447058f011def6fb495769e43ea3', 16), int('c63453f9af8978be8230fa18c67a79a5b3756ec517e006948dee5d5f8da9f53ee09d14c698c4c43c85cbb2aef03db44', 16)]),
        FQ2([int('958a94dfad16f2d9aaf0b67954e050e35dd49cf37cc2e5d556da111bc60fc63a12106429a8a872071316ee549c19243', 16), int('8e63072bd048254e6c588a5e26732aa3f8076200e288794c306a5a51914e4cd27609679d2485579514bf6dd595c2a3c', 16)])),
        (b'',
        FQ2([int('11bc78bdaf053b41a9074ecbd0503e568d13b9fc08fe1742744fad9f4d09a120c3b2ce89b56761b3795aced73bc92bf7', 16), int('c29141d97bfa8bcac20bcf756d4b178c70f2c1bdfcf9b2b53f1d5cff18e8a5a6dd42485bfcf94677ffc5c6b5212aadc', 16)]),
        FQ2([int('950b6d805a040df0a4731c0ec947c21220e86814b7ca48b35aac3cdcae0eabcff3ac6f6073522f2389306ffabf42b8f', 16), int('bc362f72d7519cba6699e2940decb146b8ba191076a1745e87f02a293a4059701203e0a501a290bdc19032ba4131694', 16)])),
        (b'abcdefghijklmnopqrstuvwxyz',
        FQ2([int('3442c314b1cbac7605c05054b8c2a6de1a20b384978a43b9211e4d8a64dd540775f6fbfe947bfbc626a68c2ea01a207', 16), int('e3f033f9dc7da6fa51ff16d88afbd6cccf406f3c1b3d6a2cf2e7e15bcf6f6e1086dfcd98bbde3a58d930d4df5df9f4e', 16)]),
        FQ2([int('8cceb30aeb9c2086a2bdfbeddb6eb0ff19565ad64c459c4c46a9b1f36d27856adc5067f1640ee884b0ca4516db0bb62', 16), int('9231b2e7288b9bb7825ad7738e88821062f6c128a706a29e609e134d2a1d52f0375cc5f6e3c4b750d68fe0338cdd32e', 16)])),
        (b'\xff' * 100,
        FQ2([int('c42c95e289801c1f9af16074c6881bec4c36c8d273877ef9f9e4edb53e5aeb2b2ae13b85a93f35cef5901f331649fa0', 16), int('bd6fd061d164cdbc416e05f3b6b8fbb446b83220bfafc5d7e073556acced1d4a8c27db2aac622866ca0b96638de5a58', 16)]),
        FQ2([int('6665371d98163f1f0b5c20be4ef8ea44d89f579aa3282e089f9570360a8c03d3ef4f148cd89ca81e68f713fb2da63f0', 16), int('1591b09924c95368d89292fa6e64f9975faa8a062e4642bb3f37657749bc52f3688fd97f690e37b949301f11b2a89493', 16)])),
    ]
)
def test_hash_to_G2(msg, x, y):
    point = hash_to_G2(msg)

    # Affine
    result_x = point[0] / point[2] # X / Z
    result_y = point[1] / point[2] # Y / Z

    assert x == result_x
    assert y == result_y
